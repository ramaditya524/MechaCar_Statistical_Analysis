R --version
# Part I
students <- c(Abraham,Beatrice,Cory,Dinah,Eric,Felicia)
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for(student in class){
print(student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part I
students <- c(Abraham,Beatrice,Cory,Dinah,Eric,Felicia)
student
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for(student in class){
print(student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
students <- c(Abraham,Beatrice,Cory,Dinah,Eric,Felicia)
# Part I
students <- c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for(student in class){
print(student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for(student in students){
print(student)
print(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring = student[2]
# Create an if statement to find the names of students where the
# second letter that is an "e".
if(substring == "e")
{
print(student)
print(sample(33:66,3))
}
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring = student[2]
# Create an if statement to find the names of students where the
# second letter that is an "e".
if(substring = "e")
{
print(student)
print(sample(33:66,3))
}
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring = student[2]
print(substring)
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring = student$2
print(substring)
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring = substr(student,2,3)
print(substring)
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring = substr(student,2,2)
print(substring)
}
# Create an if statement to fi
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring = substr(student,2,2)
print(substring)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if(substring = "e")
{
print(student)
print(sample(33:66,3))
}
}
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring = substr(student,2,2)
print(substring)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if(substring = "e")
{
print(student)
print(sample(33:66,3))
}
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring = substr(student,2,2)
print(substring)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if(substring = "e")
{
print(student)
print(sample(33:66,3))
}
else
{
next
}
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring = substr(student,2,2)
print(substring)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if(substring = e)
{
print(student)
print(sample(33:66,3))
}
else
{
next
}
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring = substr(student,2,2)
print(substring)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if(substring == "e")
{
print(student)
print(sample(33:66,3))
}
else
{
next
}
}
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring = substr(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if(substring == "e")
{
print(student)
print(sample(33:66,3))
}
else
{
next
}
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring = substr(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if(substring == "e")
{
print(student)
print(sample(33:66,3))
}
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <-  substr(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if(substring = "e")
{
print(student)
print(sample(33:66,3))
}
}
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring =  substr(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if(substring == "e")
{
print(student)
print(sample(33:66,3))
}
}
sardines <- read.csv(file="../Resources/sardines.csv")
sardines <- read.csv(file="../Resources/sardines.csv")
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
library(jsonlite)
demo_table2 <- fromJSON(txt='demo.json')
filter_table <- demo_table2[demo_table2$price > 10000,]
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample_rows,]
demo_table[sample(1:nrow(demo_table), 3),]
library(tidyverse)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'rowwise') #create summary table with multiple columns
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
wide_table <- long_table %>% spread(key="Metric",value="Score")
head(mpg)
plt <- ggplot(mpg,aes(x=manufacturer)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
#plt + geom_col() #plot a bar plot
#plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30)) #add line plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv,size=hwy*200)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive",size="Hwy fuel econ.") #add scatter plot with multiple aesthetics
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
shapiro.test(mtcars$wt)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
setwd("~/Bootcamp_feb21/Module 15")
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
shapiro.test(mtcars$wt)
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
?ggplot
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("~/Bootcamp_feb21/Module 15/MechaCar_Statistical_Analysis")
library("dplyr")
MechaCar <- read.csv("MechaCar_mpg.csv",stringsAsFactors = F)
View(MechaCar)
reg<-lm(mpg~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar)
summary(reg)
head(mtcars)
reg<-lm(mpg~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + factor(MechCars$AWD),data=MechaCar)
summary(reg)
#Deliverable2
SuspCoil <- read.csv("Suspension_Coil.csv",stringsAsFactors = F)
View(SuspCoil)
summary(SuspCoil$PSI)
summarize(SuspCoil$PSI)
summarize(SuspCoil$PSI)
summarise(SuspCoil$PSI)
library("tidyverse")
summarize(SuspCoil$PSI)
summarize(SuspCoil$PSI)
?summarize
summarize(SuspCoil)
summarize(SuspCoil,mean(SuspCoil$PSI)
summarize(SuspCoil,mean(SuspCoil$PSI)
summarise(SuspCoil,mean(SuspCoil$PSI)
summarize(SuspCoil,mean(SuspCoil$PSI),n=n())
summarize(SuspCoil,n=n())
summarize(Mean=mean(SuspCoil$PSI),n=n())
summarize(mean=mean(SuspCoil$PSI),n=n())
summarize(SuspCoil,mean=mean(SuspCoil$PSI),n=n())
summarize(SuspCoil,mean=mean(SuspCoil$PSI))
SuspCoil %>% summarize(mean=mean(SuspCoil$PSI))
SuspCoil %>% summarize(Mean=mean(SuspCoil$PSI),)
SuspCoil %>% summarize(Mean=mean(SuspCoil$PSI),Median=median(SuspCoil$PSI),Variance=var(SuspCoil$PSI),SD=sd(SuspCoil$PSI))
SuspCoil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(SuspCoil$PSI),Median=median(SuspCoil$PSI),Variance=var(SuspCoil$PSI),SD=sd(SuspCoil$PSI))
group_by(SuspCoil$Manufacturing_Lot)
mean(group_by(SuspCoil$Manufacturing_Lot))
SuspCoil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(SuspCoil$PSI),Median=median(SuspCoil$PSI),Variance=var(SuspCoil$PSI),SD=sd(SuspCoil$PSI),.groups = 'keep')
SuspCoil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI),.groups = 'keep')
Dataset_Summary <- SuspCoil %>% summarize(Mean=mean(SuspCoil$PSI),Median=median(SuspCoil$PSI),Variance=var(SuspCoil$PSI),SD=sd(SuspCoil$PSI))
View(Dataset_Summary)
Lotwise_Summary <- SuspCoil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI),.groups = 'keep')
View(Lotwise_Summary)
total_summary <- SuspCoil %>% summarize(Mean=mean(SuspCoil$PSI),Median=median(SuspCoil$PSI),Variance=var(SuspCoil$PSI),SD=sd(SuspCoil$PSI))
lot_summary <- SuspCoil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI),.groups = 'keep')
View(Lotwise_Summary)
View(lot_summary)
View(total_summary)
pop_mean <- 1500
total_t <- t.test(SuspCoil$PSI,mu=pop_mean)
View(total_t)
t.test(SuspCoil$PSI,mu=pop_mean)
?t.test
View(SuspCoil)
t.test(SuspCoil$PSI,mu=pop_mean,subset=SuspCoil$Manufacturing_Lot == 'Lot1')
t.test(SuspCoil$PSI,mu=pop_mean)
t.test(SuspCoil$PSI,mu=pop_mean,subset=SuspCoil$Manufacturing_Lot == 'Lot1')
t.test(SuspCoil$PSI,mu=pop_mean,subset=SuspCoil$Manufacturing_Lot = 'Lot1')
t.test(SuspCoil$PSI,mu=pop_mean,subset=SuspCoil$Manufacturing_Lot %in% 'Lot1')
t.test(SuspCoil$PSI,mu=pop_mean)
t.test(PSI,mu=pop_mean,data=SuspCoil,subset=Manufacturing_Lot %in% 'Lot1')
t.test(SuspCoil$PSI,mu=pop_mean,data=SuspCoil,subset=Manufacturing_Lot %in% 'Lot1')
t.test(SuspCoil$PSI,mu=pop_mean)
t.test(SuspCoil$PSI,mu=pop_mean,data=SuspCoil,subset=SuspCoil$Manufacturing_Lot %in% 'Lot1')
t.test(SuspCoil$PSI,mu=pop_mean)
t.test(SuspCoil$PSI,mu=pop_mean,data=SuspCoil,subset=SuspCoil$Manufacturing_Lot %in% Lot1)
t.test(SuspCoil$PSI,mu=pop_mean)
t.test(SuspCoil$PSI,mu=pop_mean,subset=SuspCoil(Manufacturing_Lot %in% Lot1))
t.test(SuspCoil$PSI,mu=pop_mean)
t.test(SuspCoil$PSI,mu=pop_mean,subset=SuspCoil(Manufacturing_Lot == 'Lot1'))
t.test(SuspCoil$PSI,mu=pop_mean,data = subset(SuspCoil,Manufacturing_Lot == 'Lot1'))
t.test(SuspCoil$PSI,mu=pop_mean)
t.test(SuspCoil$PSI,mu=pop_mean,data = subset(SuspCoil,Manufacturing_Lot == 'Lot1'))
t.test(SuspCoil$PSI,mu=pop_mean,data = subset(SuspCoil,Manufacturing_Lot == 'Lot3'))
t.test(SuspCoil$PSI,mu=pop_mean)
t.test(SuspCoil$PSI,mu=pop_mean,data = subset(SuspCoil,Manufacturing_Lot == 'Lot2'))
t.test(SuspCoil$PSI,mu=pop_mean)
t.test(SuspCoil$PSI,mu=pop_mean,data = subset(SuspCoil,Manufacturing_Lot == "Lot1"))
t.test(SuspCoil$PSI,mu=pop_mean)
t.test(SuspCoil$PSI,mu=pop_mean,data = subset(SuspCoil,Manufacturing_Lot == "Lot1"))
t.test(SuspCoil$PSI,mu=pop_mean,subset = subset(SuspCoil,Manufacturing_Lot == "Lot1"))
t.test(SuspCoil$PSI,mu=pop_mean)
t.test(SuspCoil$PSI,mu=pop_mean,subset = subset(SuspCoil,Manufacturing_Lot == "Lot2"))
t.test(SuspCoil$PSI,mu=pop_mean,subset = subset(SuspCoil,Manufacturing_Lot == "Lot3"))
t.test(PSI,mu=pop_mean,subset = subset(SuspCoil,Manufacturing_Lot == "Lot3"))
Suspcoil %>% t.test(PSI,mu=pop_mean,subset = subset(SuspCoil,Manufacturing_Lot == "Lot3"))
SuspCoil %>% t.test(PSI,mu=pop_mean,subset = subset(SuspCoil,Manufacturing_Lot == "Lot3"))
SuspCoil %>% t.test(PSI,mu=pop_mean,subset = subset(Manufacturing_Lot == "Lot3"))
View(SuspCoil)
SuspCoil %>% t.test("PSI",mu=pop_mean,subset = subset(Manufacturing_Lot == "Lot3"))
SuspCoil %>% t.test(PSI,mu=pop_mean,subset = subset(Manufacturing_Lot == "Lot3"))
SuspCoil %>% t.test(PSI,mu=pop_mean)
t.test(formula=SuspCoil$PSI~NULL,mu=pop_mean,subset = subset(SuspCoil$Manufacturing_Lot == "Lot3"))
t.test(x=SuspCoil$PSI,y=NULL,mu=pop_mean,subset = subset(SuspCoil$Manufacturing_Lot == "Lot3"))
t.test(SuspCoil$PSI,mu=pop_mean)
t.test(x=SuspCoil$PSI,y=NULL,mu=pop_mean,subset(SuspCoil$Manufacturing_Lot == "Lot3"))
t.test(x=PSI,y=NULL,mu=pop_mean,data=SuspCoil,subset = Manufacturing_Lot == "Lot3"))
t.test(x=PSI,y=NULL,mu=pop_mean,data=SuspCoil,subset = Manufacturing_Lot %in% "Lot3"))
t.test(x=PSI,y=NULL,mu=pop_mean,data=SuspCoil,subset = Manufacturing_Lot %in% "Lot3")
t.test(x=SuspCoil$PSI,y=NULL,mu=pop_mean,data=SuspCoil,subset = Manufacturing_Lot %in% "Lot3")
t.test(SuspCoil$PSI,mu=pop_mean)
t.test(x=SuspCoil$PSI,y=NULL,mu=pop_mean,data=SuspCoil,subset = SuspCoil$Manufacturing_Lot %in% "Lot3")
t.test(x=lot1,y=NULL,mu=pop_mean,data=SuspCoil,subset = lot1$Manufacturing_Lot %in% "Lot3")
t.test(x=SuspCoil$PSI,y=NULL,mu=pop_mean,data=SuspCoil,subset = SuspCoil$Manufacturing_Lot %==% "Lot3")
SuspCoil
t.test(x=SuspCoil$PSI,y=NULL,mu=pop_mean,data=SuspCoil,subset = Manufacturing_Lot %==% "Lot3")
t.test(SuspCoil$PSI,mu=pop_mean)
t.test(x=SuspCoil,y=NULL,mu=pop_mean,data=SuspCoil,subset = Manufacturing_Lot %==% "Lot3")
t.test(x=SuspCoil$PSI,y=NULL,mu=pop_mean,data=SuspCoil,subset = SuspCoil$PSI %in% c(SuspCoil$Manufacturing_Lot %==% "Lot3"))
t.test(SuspCoil$PSI,mu=pop_mean)
t.test(x=SuspCoil$PSI,y=NULL,mu=pop_mean,data=SuspCoil,subset = SuspCoil$PSI %in% c(SuspCoil$Manufacturing_Lot %==% "Lot3"))
t.test(x=PSI1,y=NULL,mu=pop_mean,data=SuspCoil,subset = PSI1 %in% c(SuspCoil$Manufacturing_Lot %==% "Lot3"))
t.test(x=PSI1,y=NULL,mu=pop_mean,data=SuspCoil,subset = PSI1 %in% c(SuspCoil[Manufacturing_Lot %==% "Lot3"]))
t.test(x=SuspCoil$PSI,y=NULL,mu=pop_mean,data=SuspCoil,subset = SuspCoil$PSI %in% c(SuspCoil[Manufacturing_Lot %==% "Lot3"]))
t.test(SuspCoil$PSI,mu=pop_mean)
t.test(x=SuspCoil$PSI,y=NULL,mu=pop_mean,data=SuspCoil,subset = SuspCoil$PSI %in% c(SuspCoil[Manufacturing_Lot %==% "Lot3"]))
SuspCoil[Manufacturing_Lot %==% "Lot3"]
SuspCoil[Manufacturing_Lot == "Lot3"]
SuspCoil[SuspCoil$Manufacturing_Lot == "Lot3"]
SuspCoil[SuspCoil$Manufacturing_Lot == "Lot3",]
t.test(x=SuspCoil$PSI,y=NULL,mu=pop_mean,data=SuspCoil,subset = SuspCoil$PSI %in% c(SuspCoil[Manufacturing_Lot %==% "Lot3"]))
t.test(SuspCoil$PSI,mu=pop_mean)
t.test(x=SuspCoil$PSI,y=NULL,mu=pop_mean,data=SuspCoil,subset = SuspCoil$PSI %in% c(SuspCoil[Manufacturing_Lot %==% "Lot3"]))
t.test(PSI,mu=pop_mean,data=SuspCoil,subset = SuspCoil$PSI %in% c(SuspCoil[Manufacturing_Lot %==% "Lot3"]))
t.test(foumula=PSI,mu=pop_mean,data=SuspCoil,subset = PSI %in% c(SuspCoil[Manufacturing_Lot %==% "Lot3"]))
lot1 <- subset(SuspCoil$Manufacturing_Lot == "Lot1")
lot1 <- subset(SuspCoil$Manufacturing_Lot == "Lot1")
lot1 <- subset(SuspCoil,Manufacturing_Lot == "Lot1")
t.test(SuspCoil$PSI,mu=pop_mean)
t.test(lot1$PSI,mu=pop_mean)
t.test(lot2$PSI,mu=pop_mean)
t.test(SuspCoil$PSI,mu=pop_mean)
lot1 <- subset(SuspCoil,Manufacturing_Lot == "Lot1")
lot2 <- subset(SuspCoil,Manufacturing_Lot == "Lot2")
lot3 <- subset(SuspCoil,Manufacturing_Lot == "Lot3")
t.test(lot1$PSI,mu=pop_mean)
t.test(lot2$PSI,mu=pop_mean)
t.test(lot3$PSI,mu=pop_mean)
t.test(lot1$PSI,mu=pop_mean,subset = subset(SuspCoil,Manufacturing_Lot == "Lot1"))
t.test(lot1$PSI,mu=pop_mean,subset = subset(SuspCoil,Manufacturing_Lot == "Lot1"))
t.test(SuspCoil$PSI,mu=pop_mean,subset = subset(SuspCoil,Manufacturing_Lot == "Lot1"))
View(MechaCar)
head(mpg)
